// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: docs/proto/v1/sender.proto

// Имя пакета

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sender_ToQueue_FullMethodName         = "/grpc.v1.Sender/ToQueue"
	Sender_CleanDone_FullMethodName       = "/grpc.v1.Sender/CleanDone"
	Sender_LoadStatus_FullMethodName      = "/grpc.v1.Sender/LoadStatus"
	Sender_LoadQueue_FullMethodName       = "/grpc.v1.Sender/LoadQueue"
	Sender_SenderHealtheck_FullMethodName = "/grpc.v1.Sender/SenderHealtheck"
)

// SenderClient is the client API for Sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderClient interface {
	ToQueue(ctx context.Context, in *ToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CleanDone(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoadStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadStatusResponse, error)
	LoadQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadHistoryResponse, error)
	SenderHealtheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SenderHealtheckResponse, error)
}

type senderClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderClient(cc grpc.ClientConnInterface) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) ToQueue(ctx context.Context, in *ToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sender_ToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) CleanDone(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Sender_CleanDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) LoadStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadStatusResponse)
	err := c.cc.Invoke(ctx, Sender_LoadStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) LoadQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadHistoryResponse)
	err := c.cc.Invoke(ctx, Sender_LoadQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) SenderHealtheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SenderHealtheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenderHealtheckResponse)
	err := c.cc.Invoke(ctx, Sender_SenderHealtheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SenderServer is the server API for Sender service.
// All implementations must embed UnimplementedSenderServer
// for forward compatibility.
type SenderServer interface {
	ToQueue(context.Context, *ToQueueRequest) (*emptypb.Empty, error)
	CleanDone(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	LoadStatus(context.Context, *emptypb.Empty) (*LoadStatusResponse, error)
	LoadQueue(context.Context, *emptypb.Empty) (*LoadHistoryResponse, error)
	SenderHealtheck(context.Context, *emptypb.Empty) (*SenderHealtheckResponse, error)
	mustEmbedUnimplementedSenderServer()
}

// UnimplementedSenderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSenderServer struct{}

func (UnimplementedSenderServer) ToQueue(context.Context, *ToQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToQueue not implemented")
}
func (UnimplementedSenderServer) CleanDone(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanDone not implemented")
}
func (UnimplementedSenderServer) LoadStatus(context.Context, *emptypb.Empty) (*LoadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadStatus not implemented")
}
func (UnimplementedSenderServer) LoadQueue(context.Context, *emptypb.Empty) (*LoadHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadQueue not implemented")
}
func (UnimplementedSenderServer) SenderHealtheck(context.Context, *emptypb.Empty) (*SenderHealtheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SenderHealtheck not implemented")
}
func (UnimplementedSenderServer) mustEmbedUnimplementedSenderServer() {}
func (UnimplementedSenderServer) testEmbeddedByValue()                {}

// UnsafeSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServer will
// result in compilation errors.
type UnsafeSenderServer interface {
	mustEmbedUnimplementedSenderServer()
}

func RegisterSenderServer(s grpc.ServiceRegistrar, srv SenderServer) {
	// If the following call pancis, it indicates UnimplementedSenderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sender_ServiceDesc, srv)
}

func _Sender_ToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).ToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_ToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).ToQueue(ctx, req.(*ToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sender_CleanDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).CleanDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_CleanDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).CleanDone(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sender_LoadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).LoadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_LoadStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).LoadStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sender_LoadQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).LoadQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_LoadQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).LoadQueue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sender_SenderHealtheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).SenderHealtheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sender_SenderHealtheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).SenderHealtheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Sender_ServiceDesc is the grpc.ServiceDesc for Sender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.v1.Sender",
	HandlerType: (*SenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToQueue",
			Handler:    _Sender_ToQueue_Handler,
		},
		{
			MethodName: "CleanDone",
			Handler:    _Sender_CleanDone_Handler,
		},
		{
			MethodName: "LoadStatus",
			Handler:    _Sender_LoadStatus_Handler,
		},
		{
			MethodName: "LoadQueue",
			Handler:    _Sender_LoadQueue_Handler,
		},
		{
			MethodName: "SenderHealtheck",
			Handler:    _Sender_SenderHealtheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/proto/v1/sender.proto",
}
